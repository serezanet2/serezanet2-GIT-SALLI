-- Исправленный ZoneLockLS скрипт с защитой от nil-значений

local ZoneLockLS = {}

-- Конфигурация
local config = {
    LockedColor = Color3.fromRGB(255, 0, 0),
    UnlockedColor = Color3.fromRGB(0, 255, 0),
    DefaultTeamName = "DefaultTeam"
}

-- Безопасное получение команды
local function getSafeTeam(player)
    return player and player.Team or nil
end

-- Установка состояния сиденья с защитой от ошибок
function ZoneLockLS.setSeat(seat, isLocked)
    if not seat then
        warn("Ошибка: сиденье не существует")
        return false
    end

    -- Безопасная установка цвета
    pcall(function()
        seat.Color = isLocked and config.LockedColor or config.UnlockedColor
    end)

    -- Безопасная работа с CanTouch
    if seat:IsA("BasePart") then
        pcall(function()
            seat.CanTouch = not isLocked
        end)
    end

    return true
end

-- Обновление блокировок с защитой от ошибок
function ZoneLockLS.updateLocks(player)
    if not player then return end

    local team = getSafeTeam(player)
    local teamName = (team and team.Name) or config.DefaultTeamName

    -- Здесь должна быть ваша логика обновления блокировок
    -- Пример:
    for _, seat in pairs(workspace:FindFirstChild("Seats") or {}) do
        local isLocked = -- ваша логика определения блокировки
        ZoneLockLS.setSeat(seat, isLocked)
    end
end

-- Инициализация с обработкой ошибок
function ZoneLockLS.init()
    -- Подключение обработчиков событий с защитой
    pcall(function()
        game:GetService("Players").PlayerAdded:Connect(function(player)
            player:GetPropertyChangedSignal("Team"):Connect(function()
                ZoneLockLS.updateLocks(player)
            end)
            ZoneLockLS.updateLocks(player)
        end)

        -- Обновление для уже подключенных игроков
        for _, player in pairs(game:GetService("Players"):GetPlayers()) do
            ZoneLockLS.updateLocks(player)
        end
    end)
end

-- Запуск системы
ZoneLockLS.init()

return ZoneLockLS
